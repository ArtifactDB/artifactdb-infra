var synthetics = require('Synthetics');
const log = require('SyntheticsLogger');

const synConfig = synthetics.getConfiguration();
synConfig.setConfig({
    continueOnStepFailure : true,
    screenshotOnStepStart : false
});

const apiCanaryBlueprint = async function () {
    // Handle validation for positive scenario
    const validateSuccessful = async function(res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode < 200 || res.statusCode > 299) {
                throw res.statusCode + ' ' + res.statusMessage;
            }

            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });

            res.on('end', () => {
                // Add validation on 'responseBody' here if required.
                console.log('responseBody', responseBody)
                responseBody = JSON.parse(responseBody)
                resolve();
            });
        });
    };

    // Parse the applications from the environment variable
    const applications = JSON.parse(process.env.APPLICATIONS);

    // Loop over the applications
    for (const app of applications) {
        // Set request option for verify endpoint
        let requestOptionsStep1 = {
            hostname: app.hostname,
            method: 'GET',
            path: app.path,
            port: '443',
            protocol: 'https:',
            body: "",
            headers: {"Content-Type":"application/json"}
        };
        requestOptionsStep1['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep1['headers']['User-Agent']].join(' ');

        // Set step config option for verify endpoint
        let stepConfig1 = {
            includeRequestHeaders: false,
            includeResponseHeaders: false,
            includeRequestBody: false,
            includeResponseBody: false,
            restrictedHeaders: [],
            continueOnHttpStepFailure: true
        };

        await synthetics.executeHttpStep(`Verify ${app.hostname}${app.path}`, requestOptionsStep1, validateSuccessful, stepConfig1);
    }
};

exports.handler = async () => {
    return await apiCanaryBlueprint();
};
